package com.example.accessingdatamysql;

import com.example.accessingdatamysql.securityjwt.models.AuthenticationRequest;
import com.example.accessingdatamysql.securityjwt.models.AuthenticationResponse;
import com.example.accessingdatamysql.securityjwt.services.MyUDS;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller //Controller class
@RequestMapping(path="/api")
public class MainController {
    @Autowired //Get bean called userRepository, auto generated by spring
    private UserRepository drinkEetUserRepository;

    @Autowired
    private MyUDS myUDS;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private com.example.accessingdatamysql.securityjwt.services.MyUDS userDetailsService;

    @Autowired
    private com.example.accessingdatamysql.securityjwt.utility.JwtUtil jwtTokenUtil;

    @PostMapping(path="/add") //Only POST requests
    public @ResponseBody String addNewUser (@RequestParam String firstName, @RequestParam String lastName, @RequestParam String email, @RequestParam String password){
        //ResponseBody means returned string is response
        //RequestParam means its parameter from GET/POST request
        DrinkEetUser user = new DrinkEetUser();
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setEmail(email);
        user.setPassword(password);
        drinkEetUserRepository.save(user);
        return "Saved";
    }

    @GetMapping(path="/password")
    public @ResponseBody DrinkEetUser getPassword (@RequestParam String email) {
        return drinkEetUserRepository.findByEmail(email);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<DrinkEetUser> getAllUsers() {
        //Return JSON or XML with all users
        return drinkEetUserRepository.findAll();
    }

    //requestmapping /authenticate going to take in username and password as an input argument and returns jwt.
    //created authenticate method endpoint, which is mapped to createAuthenticateToken, takes in authenticationRequest (payload in postbody)
    //contains username and password
//    @PostMapping(path="/authenticate")
//    public void createAuthenticationToken(@RequestParam String info) throws Exception{
//    public ResponseEntity<?> createAuthenticationToken(@RequestParam String info) throws Exception{
    @RequestMapping(value = "/authenticate", method = RequestMethod.POST)
    public ResponseEntity<?> createAuthenticationToken(@RequestBody String info) throws Exception{
        String username = info.split(",")[0];
        String password = info.split(",")[1];
        AuthenticationRequest authenticationRequest = new AuthenticationRequest(username, password);
        try{
            //authenticates username and password
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(authenticationRequest.getUsername(), authenticationRequest.getPassword())
            );
        } catch (BadCredentialsException e){
            throw new Exception("wrong username or password", e);
        }

        //generates jwt using userdetails. userdetails is only username at the moment
        final UserDetails userDetails = userDetailsService
                .loadUserByUsername(authenticationRequest.getUsername());
//        final UserDetails userDetails = myUDS.loadUserByUsername(authenticationRequest.getUsername());
        final String jwt = jwtTokenUtil.generateToken(userDetails);

        return ResponseEntity.ok(new AuthenticationResponse(jwt));
    }
}
